import{bg as h,bh as o}from"./main-CmMDhg6u.js";const _=s=>s?new Date(s).toISOString().split("T")[0]:null,m=h({id:"student-store",state:()=>({errors:[],successMessage:"",students:[],studentInfo:{generalInfo:{},educationalHistory:[],employmentHistory:[],englishProficiency:[],interestedUniversity:[],documentPaths:[],lead:{}}}),actions:{async search(s){return(await o("/students/search",{method:"GET",params:{query:s}})).data},async storeStudent(s){var e,t,n,a;try{const u={general_info:{student_first_name:s.generalInfo.first_name,student_last_name:s.generalInfo.last_name,student_email:s.generalInfo.email,student_whatsapp_number:s.generalInfo.mobile,date_of_birth:_(s.generalInfo.date_of_birth),gender:s.generalInfo.gender,student_passport_no:s.generalInfo.passport_number,student_address:s.generalInfo.address,student_city:s.generalInfo.city,student_country:s.generalInfo.country,student_region_state:s.generalInfo.state,visa_refusal:s.generalInfo.visa_refusal}},d={interested_university:(e=s.universityEntry)!=null&&e.length?s.universityEntry.map(r=>({country_id:r.country_id||null,intake_id:r.intake_id||null,university_id:r.university_id||null,course_id:r.course_id||null})).filter(r=>r.country_id||r.intake_id||r.university_id||r.course_id):[]},l={educational_history:(t=s.educationalHistory)!=null&&t.length?s.educationalHistory.map(r=>({degree_name:r.degree||null,institution_name:r.institution||null,passing_year:r.passing_year||null,result:r.result||null})).filter(r=>r.degree_name||r.institution_name||r.passing_year||r.result):[]},c={english_proficiency:(n=s.englishProficiency)!=null&&n.length?s.englishProficiency.map(r=>({proficiency_title:r.title||null,overall_score:r.overall_score||null,reading:r.reading||null,writing:r.writing||null,speaking:r.speaking||null,listening:r.listening||null})).filter(r=>r.proficiency_title||r.overall_score||r.reading||r.writing||r.speaking||r.listening):[]},i={employment_history:(a=s.employmentHistory)!=null&&a.length?s.employmentHistory.map(r=>({company_name:r.company_name||null,designation:r.designation||null,year:r.year||null})).filter(r=>r.company_name||r.designation||r.year):[]},g={document_paths:s.documentPaths.map(r=>({path:r.path,document_name:r.document_name,missing:r.missing||!1}))},y=await o("/students",{method:"POST",body:JSON.stringify({...u,...d,...l,...c,...i,...g})});return this.successMessage="Student created successfully",y.data}catch(u){throw console.error("Error storing student:",u),this.errors=u.response?u.response.data.errors:["An unexpected error occurred"],u}},async getStudentList(s=1,e=10,t="",n="",a="",u={}){try{const d=await o("/students",{method:"GET",params:{page:s,perPage:e,searchQuery:t,sortBy:n,orderBy:a,...u}});return this.students=d.data,d}catch(d){throw console.error("Error fetching students:",d),this.errors=d.response?d.response.data.errors:["An unexpected error occurred"],d}},async getUniversitiesForStudent(s){try{return(await o(`/students/${s}/universities`,{method:"GET"})).data}catch(e){throw console.error("Error fetching universities for student:",e),e}},async getStudentDetails(s){try{const e=await o(`/students/${s}`,{method:"GET"}),t=e.data;return this.studentInfo={generalInfo:t.generalInfo||{},educationalHistory:t.educationalHistory||[],employmentHistory:t.employmentHistory||[],englishProficiency:t.englishProficiency||[],interestedUniversity:t.interestedUniversity||[],documentPaths:t.documentPaths||[],lead:t.lead||{}},e.data}catch(e){throw console.error("Error fetching student details:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"],e}},async updateStudent(s,e){try{const t={general_info:{student_first_name:e.generalInfo.first_name,student_last_name:e.generalInfo.last_name,student_email:e.generalInfo.email,student_whatsapp_number:e.generalInfo.mobile,date_of_birth:_(e.generalInfo.date_of_birth),gender:e.generalInfo.gender,student_passport_no:e.generalInfo.passport_number,student_address:e.generalInfo.address,student_city:e.generalInfo.city,student_country:e.generalInfo.country,visa_refusal:e.generalInfo.visa_refusal}},n={interested_university:e.universityEntry.map(i=>({country_id:i.country_id,intake_id:i.intake_id,course_type:i.course_type,university_id:i.university_id,course_id:i.course_id}))},a={educational_history:e.educationalHistory.map(i=>({degree_name:i.degree,institution_name:i.institution,passing_year:i.passingYear,result:i.result}))},u={english_proficiency:e.englishProficiency.map(i=>({proficiency_title:i.proficiencyTitle,overall_score:i.overallScore,reading:i.reading,writing:i.writing,speaking:i.speaking,listening:i.listening}))},d={employment_history:e.employmentHistory.map(i=>({company_name:i.company_name,designation:i.designation,year:i.year}))},l={document_paths:e.documentPaths||[]},c=await o(`/students/${s}`,{method:"PUT",body:JSON.stringify({...t,...n,...a,...u,...d,...l})});return this.successMessage="Student updated successfully",c.data}catch(t){throw console.error("Error updating student:",t),this.errors=t.response?t.response.data.errors:["An unexpected error occurred"],t}},async deleteStudent(s){try{await o(`/student/${s}`,{method:"DELETE"}),this.successMessage="Student deleted successfully"}catch(e){throw console.error("Error deleting student:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"],e}},async updateGeneralInfo(s,e){try{const t=await o(`/students/${s}/general-info`,{method:"PUT",body:JSON.stringify({general_info:{student_first_name:e.first_name,student_last_name:e.last_name,student_email:e.email,student_whatsapp_number:e.mobile,date_of_birth:_(e.date_of_birth),gender:e.gender,student_passport_no:e.passport_number,student_address:e.address,student_city:e.city,student_country:e.country,student_region_state:e.state,visa_refusal:e.visa_refusal}})});return this.studentInfo.generalInfo=t.data,this.successMessage="General info updated successfully",t.data}catch(t){throw this.handleError(t),t}},async updateInterestedUniversity(s,e){try{console.log("Updating university preferences with data:",{studentId:s,universityEntry:e});const t={interested_university:e!=null&&e.length?e.map(a=>({id:a.id||null,country_id:a.country_id||null,intake_id:a.intake_id||null,university_id:a.university_id||null,course_id:a.course_id||null})).filter(a=>a.country_id||a.intake_id||a.university_id||a.course_id):[]};console.log("Request body:",t);const n=await o(`/students/${s}/interested-university`,{method:"PUT",body:JSON.stringify(t)});return console.log("API Response:",n),this.studentInfo.interestedUniversity=n.data,this.successMessage="University preferences updated successfully",n.data}catch(t){throw console.error("Error in updateInterestedUniversity:",t),this.handleError(t),t}},async updateEducationalHistory(s,e){try{const t=await o(`/students/${s}/educational-history`,{method:"PUT",body:JSON.stringify({educational_history:e!=null&&e.length?e.map(n=>({id:n.id||null,degree_name:n.degree||null,institution_name:n.institution||null,passing_year:n.passing_year||null,result:n.result||null})).filter(n=>n.degree_name||n.institution_name||n.passing_year||n.result):[]})});return this.studentInfo.educationalHistory=t.data,this.successMessage="Educational history updated successfully",t.data}catch(t){throw this.handleError(t),t}},async updateEnglishProficiency(s,e){try{const t=await o(`/students/${s}/english-proficiency`,{method:"PUT",body:JSON.stringify({english_proficiency:e!=null&&e.length?e.map(n=>({id:n.id||null,proficiency_title:n.proficiencyTitle||null,overall_score:n.overallScore||null,reading:n.reading||null,writing:n.writing||null,speaking:n.speaking||null,listening:n.listening||null})).filter(n=>n.proficiency_title||n.overall_score||n.reading||n.writing||n.speaking||n.listening):[]})});return this.successMessage="English proficiency updated successfully",this.studentInfo.englishProficiency}catch(t){throw this.handleError(t),t}},async updateEmploymentHistory(s,e){try{const t=await o(`/students/${s}/employment-history`,{method:"PUT",body:JSON.stringify({employment_history:e!=null&&e.length?e.map(n=>({id:n.id||null,company_name:n.company_name||null,designation:n.designation||null,year:n.year||null})).filter(n=>n.company_name||n.designation||n.year):[]})});return this.studentInfo.employmentHistory=t.data,this.successMessage="Employment history updated successfully",t.data}catch(t){throw this.handleError(t),t}},handleError(s){var e,t;console.error("API Error:",s),this.errors=((t=(e=s.response)==null?void 0:e.data)==null?void 0:t.errors)||["An unexpected error occurred"]},clearErrors(){this.errors=[]},clearSuccessMessage(){this.successMessage=""},async updateDocuments(s,e){try{const t=e.map(a=>({document_name:a.document_name,path:a.path,missing:a.missing||!1})),n=await o(`/students/${s}/documents`,{method:"PUT",body:JSON.stringify({document_paths:t})});return this.studentInfo.documentPaths=n.data,this.successMessage="Documents updated successfully",n.data}catch(t){throw this.handleError(t),t}}}});export{m as u};
