import{aK as a,aL as t}from"./main-Z3go8Xzc.js";const u=a({id:"common-function",state:()=>({countries:[],allCountries:[],branches:[],courses:[],intakes:[],notices:[],activeNotices:[],errors:[],universities:[],courseDetails:[],courseTypes:[],countryIntakeUniversityCourse:[],selectedCountryId:null,selectedCourseId:null,selectedIntakeId:null,selectedUniversityId:null,selectedCourseDetailsId:null,selectedCourseType:null}),getters:{getPreparedCourseDetails:e=>{var s,o,n;if(e.courseDetails.length===0||!e.selectedCourseDetailsId)return null;const r=e.courseDetails.find(c=>c.id===e.selectedCourseDetailsId);return r?{courseName:r.course_name,intake:((s=e.intakes.find(c=>c.intake_id===e.selectedIntakeId))==null?void 0:s.intake_name)||"",tuitionFee:r.tution_fee,courseDuration:r.course_duration,courseLabel:e.selectedCourseType,location:((o=e.countries.find(c=>c.id===e.selectedCountryId))==null?void 0:o.name)||"",universityLogo:((n=e.universities.find(c=>c.university_id===e.selectedUniversityId))==null?void 0:n.university_logo)||"",academicRequirement:r.academic_requirement||"",englishRequirement:r.english_requirement||""}:null},getFilteredCourseDetails:e=>(r,s,o,n)=>{e.selectedCountryId=r,e.selectedCourseId=s,e.selectedIntakeId=o,e.selectedUniversityId=n;const c=e.countryIntakeUniversityCourse.find(i=>parseInt(i.country_id,10)===r&&parseInt(i.course_id,10)===s&&parseInt(i.intake_id,10)===o&&parseInt(i.university_id,10)===n);return c?(e.selectedCourseDetailsId=c.id,{courseName:c.course_name,intake:c.intake_name,tuitionFee:c.tution_fee,courseDuration:c.course_duration,courseLabel:c.course_type,location:c.country_name,universityLogo:c.university_logo||"",academicRequirement:c.academic_requirement||"",englishRequirement:c.english_requirement||""}):{courseName:"",intake:"",tuitionFee:"",courseDuration:"",courseLabel:"",location:"",universityLogo:"",academicRequirement:"",englishRequirement:""}}},actions:{async getUniqueCountries(){try{const e=await t("/getUniqueCountry",{method:"GET"});this.countries=e.data}catch(e){console.error("Error fetching countries:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async getIntakesByCountry(e){try{const r=await t(`/intakes/country/${e}`,{method:"GET"});this.intakes=r.data}catch(r){console.error("Error fetching intakes:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async getCourseTypesByCountryIntake(e,r){try{const s=await t(`/course-types/${e}/${r}`,{method:"GET"});this.courseTypes=s.data}catch(s){console.error("Error fetching course types:",s),this.errors=s.response?s.response.data.errors:["An unexpected error occurred"]}},async getUniversitiesByCountryIntakeCourseType(e,r,s){try{const o=await t(`/universities/${e}/${r}/${s}`,{method:"GET"});this.universities=o.data}catch(o){console.error("Error fetching universities:",o),this.errors=o.response?o.response.data.errors:["An unexpected error occurred"]}},async getCourseDetails(e,r,s){try{const o=await t(`/course-details/${e}/${r}/${s}`,{method:"GET"});this.courseDetails=o.data,this.selectedIntakeId=e,this.selectedUniversityId=r}catch(o){console.error("Error fetching course details:",o),this.errors=o.response?o.response.data.errors:["An unexpected error occurred"]}},setSelectedCountryId(e){this.selectedCountryId=e},async getCountryIntakeUniversityCourse(){try{const e=await t("/get-country-intake-university-course",{method:"GET"});this.countryIntakeUniversityCourse=e.data;const r=new Map;e.data.forEach(s=>{r.has(s.country_id)||r.set(s.country_id,{id:s.country_id,name:s.country_name})}),this.countries=Array.from(r.values())}catch(e){console.error("Error fetching countries:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async getCountries(){try{const e=await t("/application-country",{method:"GET"});this.countries=e.data}catch(e){console.error("Error fetching countries:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async getCourses(){try{const e=await t("/course",{method:"GET"});this.courses=e.data}catch(e){console.error("Error fetching courses:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async getIntakes(){try{const e=await t("/intake",{method:"GET"});this.intakes=e.data}catch(e){console.error("Error fetching intakes:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async getUniversities(e=null,r="",s=10,o="created_at"){try{const n=await t("/university",{method:"GET",headers:{"Content-Type":"application/json"},params:{page:e,searchQuery:r,perPage:s,sortBy:o}});return this.universities=n.data,n}catch(n){throw console.error("Error fetching universities:",n),this.errors=n.response?n.response.data.errors:["An unexpected error occurred"],n}},async getCourseDetailsAll(){try{const e=await t("/course-detail-all",{method:"GET"});this.courseDetails=e.data}catch(e){console.error("Error fetching course details:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async addUniversity(e){try{const r=await t("/university",{method:"POST",body:e});this.universities.push(r.data)}catch(r){console.error("Error adding university:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async deleteUniversity(e){try{await t(`/university/${e}`,{method:"DELETE"}),this.universities=this.universities.filter(r=>r.id!==e)}catch(r){console.error("Error deleting university:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async updateUniversity(e,r){try{const s=await t(`/university/${e}`,{method:"PUT",body:r}),o=this.universities.findIndex(n=>n.id===e);o!==-1&&this.universities.splice(o,1,s.data)}catch(s){console.error("Error updating university:",s),this.errors=s.response?s.response.data.errors:["An unexpected error occurred"]}},async addIntake(e){try{const r=await t("/intake",{method:"POST",body:e});this.intakes.push(r.data)}catch(r){console.error("Error adding university:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async updateIntake(e,r){try{const s=await t(`/intake/${e}`,{method:"PUT",body:r}),o=this.intakes.findIndex(n=>n.id===e);o!==-1&&this.intakes.splice(o,1,s.data)}catch(s){console.error("Error updating intake:",s),this.errors=s.response?s.response.data.errors:["An unexpected error occurred"]}},async deleteIntake(e){try{await t(`/intake/${e}`,{method:"DELETE"}),this.intakes=this.intakes.filter(r=>r.id!==e)}catch(r){console.error("Error deleting intake:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async getBranches(){try{const e=await t("/branches",{method:"GET"});this.branches=e.data}catch(e){console.error("Error fetching branches:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async addBranch(e){try{const r=await t("/branches",{method:"POST",body:e});this.branches.push(r.data)}catch(r){console.error("Error adding branch:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async updateBranch(e,r){try{const s=await t(`/branches/${e}`,{method:"PUT",body:r}),o=this.branches.findIndex(n=>n.id===e);o!==-1&&this.branches.splice(o,1,s.data)}catch(s){console.error("Error updating branch:",s),this.errors=s.response?s.response.data.errors:["An unexpected error occurred"]}},async deleteBranch(e){try{await t(`/branches/${e}`,{method:"DELETE"}),this.branches=this.branches.filter(r=>r.id!==e)}catch(r){console.error("Error deleting branch:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async getAllCountries(){try{const e=await t("/countries",{method:"GET"});this.allCountries=e.data}catch(e){console.error("Error fetching countries:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async addAllCountry(e){try{const r=await t("/countries",{method:"POST",body:e});this.allCountries.unshift(r.data)}catch(r){console.error("Error adding country:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async updateAllCountry(e,r){try{const s=await t(`/countries/${e}`,{method:"PUT",body:r}),o=this.allCountries.findIndex(n=>n.id===e);o!==-1&&this.allCountries.splice(o,1,s.data)}catch(s){console.error("Error updating country:",s),this.errors=s.response?s.response.data.errors:["An unexpected error occurred"]}},async deleteAllCountry(e){try{await t(`/countries/${e}`,{method:"DELETE"}),this.allCountries=this.allCountries.filter(r=>r.id!==e)}catch(r){console.error("Error deleting country:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async getNotices(){try{const e=await t("/notices",{method:"GET"});this.notices=e.data}catch(e){console.error("Error fetching notices:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async getActiveNotices(){try{const e=await t("/active-notices",{method:"GET"});console.log(e.data),this.activeNotices=e.data}catch(e){console.error("Error fetching active notices:",e),this.errors=e.response?e.response.data.errors:["An unexpected error occurred"]}},async addNotice(e){try{const r=await t("/notices",{method:"POST",body:e});this.notices.push(r.data)}catch(r){console.error("Error adding notice:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}},async updateNoticeStatus(e,r){try{const s=await t(`/notices/${e}`,{method:"PUT",body:{status:r}}),o=this.notices.findIndex(n=>n.id===e);return o!==-1&&(this.notices[o].status=r),s}catch(s){throw console.error("Error updating notice status:",s),this.errors=s.response?s.response.data.errors:["An unexpected error occurred"],s}},async deleteNotice(e){try{await t(`/notices/${e}`,{method:"DELETE"}),this.notices=this.notices.filter(r=>r.id!==e)}catch(r){console.error("Error deleting notice:",r),this.errors=r.response?r.response.data.errors:["An unexpected error occurred"]}}}});export{u as c};
